import os
import json
import sys

def parse_result_file(result_file):
    with open(result_file, 'r') as f:
        result_data = json.load(f)
    return result_data

def find_result_files(start_folder):
    result_files = []
    for root, dirs, files in os.walk(start_folder):
        for file in files:
            if file.endswith('report.json'):
                result_files.append(os.path.join(root, file))
    return result_files

def print_created_files_grouped(start_folder):
    result_files = find_result_files(start_folder)
    sample_results = {}
    total_created_files = 0

    for result_file in result_files:
        result_data = parse_result_file(result_file)
        target_filename = result_data["target"]["file"]["name"]
        dropped_files = result_data.get("dropped", [])
        total_created_files += len(dropped_files)
        if target_filename not in sample_results:
            sample_results[target_filename] = []
        sample_results[target_filename].extend(dropped_files)

    for sample, dropped_files in sample_results.items():
        print(f"Sample: {sample}")
        print("Number of files created by sample:", len(dropped_files))
        print("Details of created files:")
        for file_info in dropped_files:
            file_name = file_info.get("name", "Unknown")
            file_path = file_info.get("filepath", "Unknown")
            file_type = file_info.get("type", "Unknown")
            print(f"File Name: {file_name}")
            print(f"File Path: {file_path}")
            print(f"File Type: {file_type}")
            print()
        print()

    print("Total number of files created by all samples:", total_created_files)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <folder_path>")
        sys.exit(1)

    start_folder = sys.argv[1]
    if not os.path.isdir(start_folder):
        print("Error: Invalid folder path provided.")
        sys.exit(1)

    print_created_files_grouped(start_folder)
